{"title":"JSONP抓取数据","slug":"jsonp","date":"2018-04-25T01:01:30.000Z","updated":"2018-04-26T07:21:13.453Z","comments":true,"path":"api/articles/jsonp.json","photos":[],"link":"","excerpt":null,"covers":["/img/jsonp/jsonp_axios.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近做自己个人项目(球球音乐PC端以及移动端)的时候，涉及到接口数据的抓取。<br>根据接口的特性,用到了jsonp的方式进行抓取，谈谈自己的总结吧。</p>\n<blockquote>\n<p>JSONP工作原理</p>\n</blockquote>\n<p>进行jsonp通信时,客户端会在其脚本上新建一个<code>&lt;script&gt;</code>元素,其src地址指向API接口地址。<br>例如:<code>&lt;script src=&quot;https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg?param1=1&amp;param2=2&quot;&gt;&lt;/script&gt;</code><br>(加参数的话,可在链接后面直接加相应参数,也可在配置对象里面加),并且提供一个回调函数来接受JSON数据(可自行约定)。</p>\n<p>注:jsonp库我用的是node官方的jsonp包,地址<a href=\"https://www.npmjs.com/package/node-jsonp\" target=\"_blank\" rel=\"noopener\">jsonp</a></p>\n<h2 id=\"JSONP抓取\"><a href=\"#JSONP抓取\" class=\"headerlink\" title=\"JSONP抓取\"></a>JSONP抓取</h2><blockquote>\n<p>普通抓取(服务器不做限制)</p>\n</blockquote>\n<p>官方提供了三个列子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONP(<span class=\"string\">'http://twitter.com/users/oscargodson.json'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">JSONP(<span class=\"string\">'http://api.flickr.com/services/feeds/photos_public.gne'</span>,&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'12389944@N03'</span>,<span class=\"string\">'format'</span>:<span class=\"string\">'json'</span>&#125;,<span class=\"string\">'jsoncallback'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">JSONP(<span class=\"string\">'http://graph.facebook.com/FacebookDevelopers'</span>, <span class=\"string\">'callback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过axios代理\"><a href=\"#通过axios代理\" class=\"headerlink\" title=\"通过axios代理\"></a>通过axios代理</h2><blockquote>\n<p>通过axios代理</p>\n</blockquote>\n<p>由于jsonp是一种非正式传输协议，不同于XMLHttpRequest一样需要按照CORS规范,并且配置相应header头文件进行传输。<br>所以很多公司会对其API进行请求验证。以球球音乐为例,它会对请求header中的host以及referer进行验证,如图所示<br><img src=\"/img/jsonp/jsonp_axios.png\" alt=\"jsonp_axios\"></p>\n<p>so,看了imocc关于这方面的代码。</p>\n<p>最后以<code>node server</code>作为中间层,通过axios代理,配置其header后再进行API的调用,以此方式来绕过host验证,从而获取到数据。<br>配置代码如下:</p>\n<p>vue工程的话,在<code>/build/webpack.dev.conf.js</code>中进行node server配置以及axios代理。<br>react工程的话,在其<code>webpack配置文件</code>中配置。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先引入axios以及bodyParser</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;<span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap, <span class=\"attr\">usePostCSS</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cheap-module-eval-source-map is faster for development</span></span><br><span class=\"line\">  devtool: config.dev.devtool,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// these devServer options should be customized in /config/index.js</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    before(app) &#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//bodyParser.urlencoded接收req.body,并对其进行解析。</span></span><br><span class=\"line\">      app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">      app.get(<span class=\"string\">'/api/getDiscList'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></span><br><span class=\"line\">        axios.get(url, &#123;</span><br><span class=\"line\">          headers: &#123;</span><br><span class=\"line\">            referer: <span class=\"string\">'https://c.y.qq.com/'</span>,</span><br><span class=\"line\">            host: <span class=\"string\">'c.y.qq.com'</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          params: req.query</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          res.json(response.data)</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>api/getDiscList.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDiscList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'/api/getDiscList'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class=\"line\">    platform: <span class=\"string\">'yqq'</span>,</span><br><span class=\"line\">    hostUin: <span class=\"number\">0</span>,</span><br><span class=\"line\">    sin: <span class=\"number\">0</span>,</span><br><span class=\"line\">    ein: <span class=\"number\">29</span>,</span><br><span class=\"line\">    sortId: <span class=\"number\">5</span>,</span><br><span class=\"line\">    needNewCode: <span class=\"number\">0</span>,</span><br><span class=\"line\">    categoryId: <span class=\"number\">10000000</span>,</span><br><span class=\"line\">    rnd: <span class=\"built_in\">Math</span>.random(),</span><br><span class=\"line\">    format: <span class=\"string\">'json'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(url, &#123;</span><br><span class=\"line\">    params: data</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(res.data)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现原理:1.调用<code>getDiscList</code>方法。2.请求node server服务配置地址。3.通过回调函数返回数据。</p>\n<p>以上有错误的地方,或者不懂的地方,欢迎来我的微博给我留言。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"axios","slug":"axios","count":1,"path":"api/tags/axios.json"},{"name":"jsonp","slug":"jsonp","count":1,"path":"api/tags/jsonp.json"},{"name":"node.js","slug":"node-js","count":1,"path":"api/tags/node-js.json"}]}