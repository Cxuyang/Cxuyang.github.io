{"name":"前端","slug":"前端","count":3,"postlist":[{"title":"文件上传随记","slug":"file_upload","date":"2018-04-02T02:01:30.000Z","updated":"2018-04-25T03:14:42.179Z","comments":true,"path":"api/articles/file_upload.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>多文件上传</p>\n</blockquote>\n<p>项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。</p>\n<h2 id=\"Fetch-FormData\"><a href=\"#Fetch-FormData\" class=\"headerlink\" title=\"Fetch FormData\"></a>Fetch FormData</h2><p>首先获取文件对象的数组(多文件的情况下，单文件就不需要遍历添加了),<br>随后实例FormData对象，将文件对象数组添加到FormData对象中，<br>再以fetch body属性上传就行了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">filesArray.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    fileData.append(<span class=\"string\">'file'</span>,item.raw)</span><br><span class=\"line\">&#125;)        </span><br><span class=\"line\"><span class=\"keyword\">let</span> fetchOptionsForFile=&#123;</span><br><span class=\"line\">    method:<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    body:fileData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">`<span class=\"subst\">$&#123;ipConfig&#125;</span>/api/Function/MFileImport`</span>,fetchOptionsForFile).then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>response.json()).then(<span class=\"function\"><span class=\"params\">json</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(json);&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件列表上传\"><a href=\"#文件列表上传\" class=\"headerlink\" title=\"文件列表上传\"></a>文件列表上传</h2><p>通过选择文件夹，取得文件夹内的文件列表然后以POST FormData的方式进行上传。</p>\n<p>上传配置只需在<code>input type=file</code>加上<code>webkitdirectory</code>属性即可。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileList\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">webkitdirectory</span> <span class=\"attr\">v-on:change</span> =<span class=\"string\">\"uploadFileList\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>注:webkitdirectory属性目前仅支持webkit内核的浏览器。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileList = <span class=\"keyword\">this</span>.$refs.fileList.files</span><br></pre></td></tr></table></figure>\n<p>取得文件列表<code>fileList</code>后循环添加到<code>fileData</code>对象就行了。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"前言多文件上传项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。Fetch FormDat","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"fetch","slug":"fetch","count":1,"path":"api/tags/fetch.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}]},{"title":"JSONP抓取数据","slug":"jsonp","date":"2018-04-25T01:01:30.000Z","updated":"2018-04-26T07:21:13.453Z","comments":true,"path":"api/articles/jsonp.json","excerpt":"","keywords":null,"cover":"/img/jsonp/jsonp_axios.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近做自己个人项目(球球音乐PC端以及移动端)的时候，涉及到接口数据的抓取。<br>根据接口的特性,用到了jsonp的方式进行抓取，谈谈自己的总结吧。</p>\n<blockquote>\n<p>JSONP工作原理</p>\n</blockquote>\n<p>进行jsonp通信时,客户端会在其脚本上新建一个<code>&lt;script&gt;</code>元素,其src地址指向API接口地址。<br>例如:<code>&lt;script src=&quot;https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg?param1=1&amp;param2=2&quot;&gt;&lt;/script&gt;</code><br>(加参数的话,可在链接后面直接加相应参数,也可在配置对象里面加),并且提供一个回调函数来接受JSON数据(可自行约定)。</p>\n<p>注:jsonp库我用的是node官方的jsonp包,地址<a href=\"https://www.npmjs.com/package/node-jsonp\" target=\"_blank\" rel=\"noopener\">jsonp</a></p>\n<h2 id=\"JSONP抓取\"><a href=\"#JSONP抓取\" class=\"headerlink\" title=\"JSONP抓取\"></a>JSONP抓取</h2><blockquote>\n<p>普通抓取(服务器不做限制)</p>\n</blockquote>\n<p>官方提供了三个列子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONP(<span class=\"string\">'http://twitter.com/users/oscargodson.json'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">JSONP(<span class=\"string\">'http://api.flickr.com/services/feeds/photos_public.gne'</span>,&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'12389944@N03'</span>,<span class=\"string\">'format'</span>:<span class=\"string\">'json'</span>&#125;,<span class=\"string\">'jsoncallback'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">JSONP(<span class=\"string\">'http://graph.facebook.com/FacebookDevelopers'</span>, <span class=\"string\">'callback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过axios代理\"><a href=\"#通过axios代理\" class=\"headerlink\" title=\"通过axios代理\"></a>通过axios代理</h2><blockquote>\n<p>通过axios代理</p>\n</blockquote>\n<p>由于jsonp是一种非正式传输协议，不同于XMLHttpRequest一样需要按照CORS规范,并且配置相应header头文件进行传输。<br>所以很多公司会对其API进行请求验证。以球球音乐为例,它会对请求header中的host以及referer进行验证,如图所示<br><img src=\"/img/jsonp/jsonp_axios.png\" alt=\"jsonp_axios\"></p>\n<p>so,看了imocc关于这方面的代码。</p>\n<p>最后以<code>node server</code>作为中间层,通过axios代理,配置其header后再进行API的调用,以此方式来绕过host验证,从而获取到数据。<br>配置代码如下:</p>\n<p>vue工程的话,在<code>/build/webpack.dev.conf.js</code>中进行node server配置以及axios代理。<br>react工程的话,在其<code>webpack配置文件</code>中配置。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先引入axios以及bodyParser</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;<span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap, <span class=\"attr\">usePostCSS</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cheap-module-eval-source-map is faster for development</span></span><br><span class=\"line\">  devtool: config.dev.devtool,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// these devServer options should be customized in /config/index.js</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    before(app) &#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//bodyParser.urlencoded接收req.body,并对其进行解析。</span></span><br><span class=\"line\">      app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">true</span>&#125;))</span><br><span class=\"line\">      app.get(<span class=\"string\">'/api/getDiscList'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></span><br><span class=\"line\">        axios.get(url, &#123;</span><br><span class=\"line\">          headers: &#123;</span><br><span class=\"line\">            referer: <span class=\"string\">'https://c.y.qq.com/'</span>,</span><br><span class=\"line\">            host: <span class=\"string\">'c.y.qq.com'</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          params: req.query</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          res.json(response.data)</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>api/getDiscList.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDiscList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'/api/getDiscList'</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class=\"line\">    platform: <span class=\"string\">'yqq'</span>,</span><br><span class=\"line\">    hostUin: <span class=\"number\">0</span>,</span><br><span class=\"line\">    sin: <span class=\"number\">0</span>,</span><br><span class=\"line\">    ein: <span class=\"number\">29</span>,</span><br><span class=\"line\">    sortId: <span class=\"number\">5</span>,</span><br><span class=\"line\">    needNewCode: <span class=\"number\">0</span>,</span><br><span class=\"line\">    categoryId: <span class=\"number\">10000000</span>,</span><br><span class=\"line\">    rnd: <span class=\"built_in\">Math</span>.random(),</span><br><span class=\"line\">    format: <span class=\"string\">'json'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(url, &#123;</span><br><span class=\"line\">    params: data</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(res.data)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现原理:1.调用<code>getDiscList</code>方法。2.请求node server服务配置地址。3.通过回调函数返回数据。</p>\n<p>以上有错误的地方,或者不懂的地方,欢迎来我的微博给我留言。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言最近做自己个人项目(球球音乐PC端以及移动端)的时候，涉及到接口数据的抓取。<br>根据接口的特性,用到了jsonp的方式进行抓取，谈谈自己的总结吧。JSONP工作原理进行jsonp通信时,客户端会在其脚本上新建一个&lt;script&gt;元素,其src地址指向API接口","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"axios","slug":"axios","count":1,"path":"api/tags/axios.json"},{"name":"jsonp","slug":"jsonp","count":1,"path":"api/tags/jsonp.json"},{"name":"node.js","slug":"node-js","count":1,"path":"api/tags/node-js.json"}]},{"title":"JS防抖动与节流","slug":"JS防抖动与节流","date":"2018-06-07T01:01:30.000Z","updated":"2018-06-07T05:59:23.250Z","comments":true,"path":"api/articles/JS防抖动与节流.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于自己在之前的个人项目中涉及到JS防抖动的问题,所以我上网查询了相关资料,顺便谈谈自己对防抖动与节流的总结吧</p>\n<blockquote>\n<p>应用场景</p>\n</blockquote>\n<ol>\n<li>window的resize，scroll事件</li>\n<li>拖拽过程中的 mousemove事件</li>\n<li>文字输入过程中的keyup</li>\n<li>连续快速点击等事件</li>\n</ol>\n<p>这些事件会在短时间内多次触发,十分影响浏览器性能而且也不利于以后维护。</p>\n<h2 id=\"防抖动-debounce\"><a href=\"#防抖动-debounce\" class=\"headerlink\" title=\"防抖动(debounce)\"></a>防抖动(debounce)</h2><blockquote>\n<p>原理</p>\n</blockquote>\n<p>在调用事件之前,设置一个计时器,在规定时间之后才会去调用。<br>而在规定时间内再次执行这个调用事件的动作的话,就会把原来的定时器clear掉,再重新设置一个定时器。<br>与函数节流不同,防抖动只有最后一次操作能被触发</p>\n<blockquote>\n<p>具体代码实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将会包装事件的 debounce 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 维护一个 timer</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 ‘this’ 和 ‘arguments’ 获取函数的作用域和变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(context, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当用户滚动时被调用的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'You are scrolling!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 debounce 中包装我们的函数，过 2 秒触发一次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>);</span><br><span class=\"line\">elem.addEventListener(<span class=\"string\">'scroll'</span>, debounce(foo, <span class=\"number\">2000</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数节流-throttle\"><a href=\"#函数节流-throttle\" class=\"headerlink\" title=\"函数节流(throttle)\"></a>函数节流(throttle)</h2><p>节流是另一种处理类似问题的解决方法。<br><code>节流函数允许一个函数在规定的时间内只执行一次。</code></p>\n<p>它和防抖动最大的区别就是，<code>节流函数不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。(每隔一段时间执行一次)</code></p>\n<p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流阀技术来实现。</p>\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行；直到delay秒后，定时器执行函数，清空定时器，这样就可以设置下个定时器。</p>\n<blockquote>\n<p>具体代码实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = fucntion(func,delay)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> funtion()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context,args);</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;,delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上有错误的地方,或者不懂的地方,欢迎来我的微博给我留言。</p>\n<p>参考链接 <a href=\"https://blog.csdn.net/crystal6918/article/details/62236730\" target=\"_blank\" rel=\"noopener\">JS防抖动与节流</a></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言由于自己在之前的个人项目中涉及到JS防抖动的问题,所以我上网查询了相关资料,顺便谈谈自己对防抖动与节流的总结吧应用场景window的resize，scroll事件拖拽过程中的 mousemove事件文字输入过程中的keyup连续快速点击等事件这些事件会在短时间内多次触发,十分","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}]}]}