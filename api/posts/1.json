{"total":4,"pageSize":10,"pageCount":1,"data":[{"title":"Fetch随记","slug":"fetch","date":"2018-03-05T01:01:30.000Z","updated":"2018-03-05T03:40:35.833Z","comments":true,"path":"api/articles/fetch.json","excerpt":"","keywords":null,"cover":"/img/fetch-noheader.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Fetch随记</p>\n</blockquote>\n<p>最近公司着手vue来开启新项目，前后端数据交互采用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"noopener\">Fetch</a>。<br>虽然自己在个人的React项目中用过<code>fetch</code>框架,但当时后台数据api是支持<code>cors</code>的,当时也没想那么多。到后面实际运用配置跨域时,发现问题还是很多的。<br>在网上看到了很多很好的答案，自己总结一下。</p>\n<h2 id=\"服务器支持-CORS\"><a href=\"#服务器支持-CORS\" class=\"headerlink\" title=\"服务器支持 CORS\"></a>服务器支持 CORS</h2><p>服务器支持 CORS的情况下，可以使用Fetch Api。 </p>\n<h3 id=\"配置header\"><a href=\"#配置header\" class=\"headerlink\" title=\"配置header\"></a>配置header</h3><p>在客户端设置相应的  <code>Access-Control-Allow-Origin</code>  即可得到数据。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> myHeaders = new Headers(&#123;</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    headers: myHeaders,</span><br><span class=\"line\">    mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">&#125;) .<span class=\"keyword\">then</span>((res) =&gt; &#123;</span><br><span class=\"line\">    // TODO </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">作者：Seven</span><br><span class=\"line\">链接：https://www.zhihu.com/question/47029864/answer/150069385</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"不配置header\"><a href=\"#不配置header\" class=\"headerlink\" title=\"不配置header\"></a>不配置header</h3><p>不配置header的话有可能返回的是一个response对象,<br><img src=\"/img/fetch-noheader.jpg\" alt=\"fetch-noheader\"><br>这时可将<code>.(response=&gt;response.json())</code>改为<code>.(response=&gt;response.text())</code>;</p>\n<h2 id=\"服务器不支持-CORS\"><a href=\"#服务器不支持-CORS\" class=\"headerlink\" title=\"服务器不支持 CORS\"></a>服务器不支持 CORS</h2><h3 id=\"联系后端人员修改\"><a href=\"#联系后端人员修改\" class=\"headerlink\" title=\"联系后端人员修改\"></a>联系后端人员修改</h3><h3 id=\"采用JSONP方式\"><a href=\"#采用JSONP方式\" class=\"headerlink\" title=\"采用JSONP方式\"></a>采用JSONP方式</h3><p>我看到知乎上有一篇介绍JSONP很好的文章，我就不展开说了<br><a href=\"https://zhuanlan.zhihu.com/p/22338759\" target=\"_blank\" rel=\"noopener\">JSONP</a></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言Fetch随记最近公司着手vue来开启新项目，前后端数据交互采用Fetch。<br>虽然自己在个人的React项目中用过fetch框架,但当时后台数据api是支持cors的,当时也没想那么多。到后面实际运用配置跨域时,发现问题还是很多的。<br>在网上看到了很多很好的答案，自","link":"","raw":null,"photos":[],"categories":[{"name":"ES6","slug":"ES6","count":2,"path":"api/categories/ES6.json"}],"tags":[{"name":"fetch","slug":"fetch","count":1,"path":"api/tags/fetch.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}]},{"title":"ES6模块化随记","slug":"ES6-Module","date":"2018-02-10T01:01:30.000Z","updated":"2018-02-27T02:04:23.815Z","comments":true,"path":"api/articles/ES6-Module.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>ES6模块化杂谈</p>\n</blockquote>\n<p>从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于<code>对象的解构赋值</code>.</p>\n<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>module.js和es6.js位于同一目录下。</p>\n<h3 id=\"module-js\"><a href=\"#module-js\" class=\"headerlink\" title=\"module.js\"></a>module.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> const name = <span class=\"string\">'cxy'</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">text</span></span>()&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-js\"><a href=\"#es6-js\" class=\"headerlink\" title=\"es6.js\"></a>es6.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;name, text&#125; from <span class=\"string\">'./module.js'</span></span><br><span class=\"line\">console.log(name)</span><br><span class=\"line\">text()</span><br></pre></td></tr></table></figure>\n<p>引入module.js中所有内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as mod from <span class=\"string\">'./module.js'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言ES6模块化杂谈从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于对象的解构赋值.Startmodule.js和es6.js位于同一目录下。module.js1<br>2<br>3<br>4<br>","link":"","raw":null,"photos":[],"categories":[{"name":"ES6","slug":"ES6","count":2,"path":"api/categories/ES6.json"}],"tags":[{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"},{"name":"Module","slug":"Module","count":1,"path":"api/tags/Module.json"}]},{"title":"Hello Blog","slug":"hello_blog","date":"2018-02-08T01:01:30.000Z","updated":"2018-03-30T03:27:27.336Z","comments":true,"path":"api/articles/hello_blog.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Hello Blog</p>\n</blockquote>\n<p>记录一下我搭建blog的心路历程吧。<br>我之前选择的是<code>Jekyll+github</code>来搭建blog，但是环境一直没搭好。之间刚好又看到了hexo，环境配置等都比较简单，就转到<code>hexo+github</code>来了。<br>在此感谢hexo主题Lite的开发者。打算等过段时间工作稳定了再慢慢研究开发自己的hexo theme。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>从hexo官网例子开始</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><p>创建你的hexo工程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>在本地运行你的hexo服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"与github-page-建立关联\"><a href=\"#与github-page-建立关联\" class=\"headerlink\" title=\"与github page 建立关联\"></a>与github page 建立关联</h3><p>到这里你会看到_config.yml文件(此为hexo工程配置文件)。<br>将里面的repo仓库地址，branch分支填好<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:your github page</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><p>生成静态网页(里面内容也是你关联的github仓库的内容)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>修改hexo工程后 可用hexo clean清除缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><p>部署网站到你的github page上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h2 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h2><p>主题部分官方以及社区成员给了很多很好看的主题，详情见<a href=\"https://hexo.io/themes\" target=\"_blank\" rel=\"noopener\">hexo_theme</a>。</p>\n<ol>\n<li>git clone主题仓库放到themes文件夹下面。</li>\n<li>将同一目录下的_config.yml配置文件里面的theme后面改为你所要用的theme的名称(<code>要与theme文件夹下的主题文件夹名称相同</code>)。</li>\n<li>一般theme都会有配置说明，对照改成你想要的就行了。</li>\n</ol>\n<h2 id=\"Archives\"><a href=\"#Archives\" class=\"headerlink\" title=\"Archives\"></a>Archives</h2><p>hexo文章采用<a href=\"https://www.appinn.com/markdown/index.html\" target=\"_blank\" rel=\"noopener\">markdown语法</a>,一篇文章一个md文件。<br>新建markdown文件的话,在hexo工程目录下执行以下命令就行了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">布局\t路径</span><br><span class=\"line\">post\t<span class=\"built_in\">source</span>/_posts</span><br><span class=\"line\">page\t<span class=\"built_in\">source</span></span><br><span class=\"line\">draft\t<span class=\"built_in\">source</span>/_drafts</span><br></pre></td></tr></table></figure>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"前言Hello Blog记录一下我搭建blog的心路历程吧。<br>我之前选择的是Jekyll+github来搭建blog，但是环境一直没搭好。之间刚好又看到了hexo，环境配置等都比较简单，就转到hexo+github来了。<br>在此感谢hexo主题Lite的开发者。打算等过","link":"","raw":null,"photos":[],"categories":[{"name":"hexo","slug":"hexo","count":1,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"hexo theme","slug":"hexo-theme","count":1,"path":"api/tags/hexo-theme.json"}]},{"title":"Hello World","slug":"hello-world","date":"2018-02-06T01:01:30.000Z","updated":"2018-02-27T03:18:57.207Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Blog寄语\"><a href=\"#Blog寄语\" class=\"headerlink\" title=\"Blog寄语\"></a>Blog寄语</h2><blockquote>\n<p>Hello World</p>\n</blockquote>\n<p>最近工作闲下来 整理思绪决定开个blog记录一下自己的学习过程以及生活感想。<br>也是为了提醒自己与他人的差距 以及前行的初心。<br>详情blog构建过程见<a href=\"https://cxuyang.github.io/2018/02/08/hello_blog/\">Hello Blog</a></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"Blog寄语Hello World最近工作闲下来 整理思绪决定开个blog记录一下自己的学习过程以及生活感想。<br>也是为了提醒自己与他人的差距 以及前行的初心。<br>详情blog构建过程见Hello BlogEnd后面再补充吧。","link":"","raw":null,"photos":[],"categories":[{"name":"life","slug":"life","count":1,"path":"api/categories/life.json"}],"tags":[{"name":"life","slug":"life","count":1,"path":"api/tags/life.json"}]}]}