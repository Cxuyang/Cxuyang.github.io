{"total":7,"pageSize":3,"pageCount":3,"data":[{"title":"文件上传随记","slug":"file_upload","date":"2018-04-02T02:01:30.000Z","updated":"2018-04-25T03:14:42.179Z","comments":true,"path":"api/articles/file_upload.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>多文件上传</p>\n</blockquote>\n<p>项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。</p>\n<h2 id=\"Fetch-FormData\"><a href=\"#Fetch-FormData\" class=\"headerlink\" title=\"Fetch FormData\"></a>Fetch FormData</h2><p>首先获取文件对象的数组(多文件的情况下，单文件就不需要遍历添加了),<br>随后实例FormData对象，将文件对象数组添加到FormData对象中，<br>再以fetch body属性上传就行了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">filesArray.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    fileData.append(<span class=\"string\">'file'</span>,item.raw)</span><br><span class=\"line\">&#125;)        </span><br><span class=\"line\"><span class=\"keyword\">let</span> fetchOptionsForFile=&#123;</span><br><span class=\"line\">    method:<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    body:fileData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">`<span class=\"subst\">$&#123;ipConfig&#125;</span>/api/Function/MFileImport`</span>,fetchOptionsForFile).then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>response.json()).then(<span class=\"function\"><span class=\"params\">json</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(json);&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件列表上传\"><a href=\"#文件列表上传\" class=\"headerlink\" title=\"文件列表上传\"></a>文件列表上传</h2><p>通过选择文件夹，取得文件夹内的文件列表然后以POST FormData的方式进行上传。</p>\n<p>上传配置只需在<code>input type=file</code>加上<code>webkitdirectory</code>属性即可。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileList\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">webkitdirectory</span> <span class=\"attr\">v-on:change</span> =<span class=\"string\">\"uploadFileList\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>注:webkitdirectory属性目前仅支持webkit内核的浏览器。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileList = <span class=\"keyword\">this</span>.$refs.fileList.files</span><br></pre></td></tr></table></figure>\n<p>取得文件列表<code>fileList</code>后循环添加到<code>fileData</code>对象就行了。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"前言多文件上传项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。Fetch FormDat","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"fetch","slug":"fetch","count":1,"path":"api/tags/fetch.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}]},{"title":"JS模块化规范","slug":"JS模块化规范","date":"2018-02-10T01:01:30.000Z","updated":"2018-06-25T02:46:38.941Z","comments":true,"path":"api/articles/JS模块化规范.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>ES6模块化杂谈</p>\n</blockquote>\n<p>从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于<code>对象的解构赋值</code>.</p>\n<p>module.js和es6.js位于同一目录下。</p>\n<h3 id=\"module-js\"><a href=\"#module-js\" class=\"headerlink\" title=\"module.js\"></a>module.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'cxy'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">text</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-js\"><a href=\"#es6-js\" class=\"headerlink\" title=\"es6.js\"></a>es6.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;name, text&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./module.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">text()</span><br></pre></td></tr></table></figure>\n<p>引入module.js中所有内容<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mod <span class=\"keyword\">from</span> <span class=\"string\">'./module.js'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JS模块化规范\"><a href=\"#JS模块化规范\" class=\"headerlink\" title=\"JS模块化规范\"></a>JS模块化规范</h2><blockquote>\n<p>JS模块化规范</p>\n</blockquote>\n<p>学习node.js的过程中回头来谈谈自己对于JS模块化规范的总结(总结比较简单,详情可看我提供的资料或者自行查询)。</p>\n<h3 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h3><p>为了弥补<code>JavaScript</code>相关缺陷，以及为了规范其标准，以达到像Python、Ruby、和Java具备开发大型应用的基础能力。</p>\n<blockquote>\n<p>CommonJS模块化规范</p>\n</blockquote>\n<p>在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就可以调用模块提供的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p>\n<p>require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。</p>\n<h3 id=\"AMD规范-异步模块定义\"><a href=\"#AMD规范-异步模块定义\" class=\"headerlink\" title=\"AMD规范(异步模块定义)\"></a>AMD规范(异步模块定义)</h3><p>CommonJS模块规范的延伸。因为之前CommonJS模块化引入方法是<code>同步</code>的,不完全适合前端的应用场景,因此AMD规范(异步模块定义)便有了更好的运用。</p>\n<blockquote>\n<p>AMD模块化规范</p>\n</blockquote>\n<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">　math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。目前，主要有两个Javascript库实现了AMD规范：<code>require.js</code>和<code>curl.js</code>。</p>\n<h3 id=\"CMD规范\"><a href=\"#CMD规范\" class=\"headerlink\" title=\"CMD规范\"></a>CMD规范</h3><p>CMD规范由国内的玉伯提出,与AMD规范的主要区别在于定义模块和依赖引入的部分.</p>\n<p>AMD需要在声明模块的时候指定所有依赖<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'dep1'</span>, <span class=\"string\">'dep2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dep1, dep2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>与AMD模块规范相比,CMD模块更接近于Node对CommonJS规范的定义:<code>define(factory)</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>require, exports, module通过形参传递给模块,在需要依赖模块时,再调用require()引入模块。</p>\n<h2 id=\"兼容多种模块规范\"><a href=\"#兼容多种模块规范\" class=\"headerlink\" title=\"兼容多种模块规范\"></a>兼容多种模块规范</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, definition</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检测上下文环境是否为AMD或CMD</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hasDefine = <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 检查上下文环境是否为Node</span></span><br><span class=\"line\">    hasExports = <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasDefine) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AMD环境或CMD环境</span></span><br><span class=\"line\">    define(definition);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hasExports) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义为普通Node模块</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将模块的执行结果挂在window变量中，在浏览器中this指向window对象，在node中为global</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>[name] = definition();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p>《深入浅出node.js》</p>\n<p><a href=\"https://www.cnblogs.com/chenguangliang/p/5856701.html\" target=\"_blank\" rel=\"noopener\">JS模块化规范</a></p>\n</blockquote>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言ES6模块化杂谈从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于对象的解构赋值.module.js和es6.js位于同一目录下。module.js1<br>2<br>3<br>4<br>expor","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"},{"name":"模块化","slug":"模块化","count":1,"path":"api/tags/模块化.json"}]},{"title":"Hello Blog","slug":"hello_blog","date":"2018-02-08T01:01:30.000Z","updated":"2018-04-25T03:03:51.159Z","comments":true,"path":"api/articles/hello_blog.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Hello Blog</p>\n</blockquote>\n<p>记录一下我搭建blog的心路历程吧。<br>我之前选择的是<code>Jekyll+github</code>来搭建blog，但是环境一直没搭好。之间刚好又看到了hexo，环境配置等都比较简单，就转到<code>hexo+github</code>来了。<br>在此感谢hexo主题Lite的开发者。打算等过段时间工作稳定了再慢慢研究开发自己的hexo theme。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>从hexo官网例子开始</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><p>创建你的hexo工程</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new \"My New Post\"</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>在本地运行你的hexo服务</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"与github-page-建立关联\"><a href=\"#与github-page-建立关联\" class=\"headerlink\" title=\"与github page 建立关联\"></a>与github page 建立关联</h3><p>到这里你会看到_config.yml文件(此为hexo工程配置文件)。<br>将里面的repo仓库地址，branch分支填好<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">deploy:</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">type</span>: <span class=\"title\">git</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">repo</span>: <span class=\"title\">git</span>@<span class=\"title\">github.com:your</span> <span class=\"title\">github</span> <span class=\"title\">page</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">branch</span>: <span class=\"title\">master</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><p>生成静态网页(里面内容也是你关联的github仓库的内容)</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>修改hexo工程后 可用hexo clean清除缓存<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><p>部署网站到你的github page上<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h2 id=\"theme\"><a href=\"#theme\" class=\"headerlink\" title=\"theme\"></a>theme</h2><p>主题部分官方以及社区成员给了很多很好看的主题，详情见<a href=\"https://hexo.io/themes\" target=\"_blank\" rel=\"noopener\">hexo_theme</a>。</p>\n<ol>\n<li>git clone主题仓库放到themes文件夹下面。</li>\n<li>将同一目录下的_config.yml配置文件里面的theme后面改为你所要用的theme的名称(<code>要与theme文件夹下的主题文件夹名称相同</code>)。</li>\n<li>一般theme都会有配置说明，对照改成你想要的就行了。</li>\n</ol>\n<h2 id=\"Archives\"><a href=\"#Archives\" class=\"headerlink\" title=\"Archives\"></a>Archives</h2><p>hexo文章采用<a href=\"https://www.appinn.com/markdown/index.html\" target=\"_blank\" rel=\"noopener\">markdown语法</a>,一篇文章一个md文件。<br>新建markdown文件的话,在hexo工程目录下执行以下命令就行了<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;<span class=\"built_in\">title</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">布局\t路径</span><br><span class=\"line\">post\tsource/_posts</span><br><span class=\"line\">page\tsource</span><br><span class=\"line\">draft\tsource/_drafts</span><br></pre></td></tr></table></figure>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"前言Hello Blog记录一下我搭建blog的心路历程吧。<br>我之前选择的是Jekyll+github来搭建blog，但是环境一直没搭好。之间刚好又看到了hexo，环境配置等都比较简单，就转到hexo+github来了。<br>在此感谢hexo主题Lite的开发者。打算等过","link":"","raw":null,"photos":[],"categories":[{"name":"hexo","slug":"hexo","count":1,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"hexo theme","slug":"hexo-theme","count":1,"path":"api/tags/hexo-theme.json"}]}]}