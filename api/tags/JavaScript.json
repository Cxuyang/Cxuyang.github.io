{"name":"JavaScript","slug":"JavaScript","count":2,"postlist":[{"title":"JS模块化规范","slug":"JS模块化规范","date":"2018-02-10T01:01:30.000Z","updated":"2019-04-11T07:09:11.251Z","comments":true,"path":"api/articles/JS模块化规范.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>ES6模块化杂谈</p>\n</blockquote>\n<p>从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于<code>对象的解构赋值</code>.</p>\n<p>module.js和es6.js位于同一目录下。</p>\n<h3 id=\"module-js\"><a href=\"#module-js\" class=\"headerlink\" title=\"module.js\"></a>module.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'cxy'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">text</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-js\"><a href=\"#es6-js\" class=\"headerlink\" title=\"es6.js\"></a>es6.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;name, text&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./module.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">text()</span><br></pre></td></tr></table></figure>\n<p>引入module.js中所有内容<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mod <span class=\"keyword\">from</span> <span class=\"string\">'./module.js'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JS模块化规范\"><a href=\"#JS模块化规范\" class=\"headerlink\" title=\"JS模块化规范\"></a>JS模块化规范</h2><blockquote>\n<p>JS模块化规范</p>\n</blockquote>\n<p>学习node.js的过程中回头来谈谈自己对于JS模块化规范的总结(总结比较简单,详情可看我提供的资料或者自行查询)。</p>\n<h3 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h3><p>为了弥补<code>JavaScript</code>相关缺陷，以及为了规范其标准，以达到像Python、Ruby、和Java具备开发大型应用的基础能力。</p>\n<blockquote>\n<p>CommonJS模块化规范</p>\n</blockquote>\n<p>在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就可以调用模块提供的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)}</p>\n<p>require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。</p>\n<h3 id=\"AMD规范-异步模块定义\"><a href=\"#AMD规范-异步模块定义\" class=\"headerlink\" title=\"AMD规范(异步模块定义)\"></a>AMD规范(异步模块定义)</h3><p>CommonJS模块规范的延伸。因为之前CommonJS模块化引入方法是<code>同步</code>的,不完全适合前端的应用场景,因此AMD规范(异步模块定义)便有了更好的运用。</p>\n<blockquote>\n<p>AMD模块化规范</p>\n</blockquote>\n<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">　math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。目前，主要有两个Javascript库实现了AMD规范：<code>require.js</code>和<code>curl.js</code>。</p>\n<h3 id=\"CMD规范\"><a href=\"#CMD规范\" class=\"headerlink\" title=\"CMD规范\"></a>CMD规范</h3><p>CMD规范由国内的玉伯提出,与AMD规范的主要区别在于定义模块和依赖引入的部分.</p>\n<p>AMD需要在声明模块的时候指定所有依赖<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'dep1'</span>, <span class=\"string\">'dep2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dep1, dep2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>与AMD模块规范相比,CMD模块更接近于Node对CommonJS规范的定义:<code>define(factory)</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>); <span class=\"comment\">//在需要时申明</span></span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</span><br><span class=\"line\">    b.doSomething();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">作者：subwaydown</span><br><span class=\"line\">链接：https:<span class=\"comment\">//juejin.im/post/5aaa37c8f265da23945f365c</span></span><br><span class=\"line\">来源：掘金</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>\n<p>require, exports, module通过形参传递给模块,在需要依赖模块时,再调用require()引入模块。</p>\n<h2 id=\"兼容多种模块规范\"><a href=\"#兼容多种模块规范\" class=\"headerlink\" title=\"兼容多种模块规范\"></a>兼容多种模块规范</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, definition</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检测上下文环境是否为AMD或CMD</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hasDefine = <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 检查上下文环境是否为Node</span></span><br><span class=\"line\">    hasExports = <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasDefine) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AMD环境或CMD环境</span></span><br><span class=\"line\">    define(definition);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hasExports) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义为普通Node模块</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将模块的执行结果挂在window变量中，在浏览器中this指向window对象，在node中为global</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>[name] = definition();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hello;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p>《深入浅出node.js》</p>\n<p><a href=\"https://www.cnblogs.com/chenguangliang/p/5856701.html\" target=\"_blank\" rel=\"noopener\">JS模块化规范</a></p>\n</blockquote>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言ES6模块化杂谈从react的学习回过头来看ES6的模块化<br>ES6中自带模块化机制，告别了sea.js和require.js<br>类似于对象的解构赋值.module.js和es6.js位于同一目录下。module.js1<br>2<br>3<br>4<br>expor","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"},{"name":"模块化","slug":"模块化","count":1,"path":"api/tags/模块化.json"}]},{"title":"JS防抖动与节流","slug":"JS防抖动与节流","date":"2018-06-07T01:01:30.000Z","updated":"2019-04-10T01:12:02.491Z","comments":true,"path":"api/articles/JS防抖动与节流.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于自己在之前的个人项目中涉及到JS防抖动的问题,所以我上网查询了相关资料,顺便谈谈自己对防抖动与节流的总结吧</p>\n<blockquote>\n<p>应用场景</p>\n</blockquote>\n<ol>\n<li>window的resize，scroll事件</li>\n<li>拖拽过程中的 mousemove事件</li>\n<li>文字输入过程中的keyup</li>\n<li>连续快速点击等事件</li>\n</ol>\n<p>这些事件会在短时间内多次触发,十分影响浏览器性能而且也不利于以后维护。</p>\n<h2 id=\"防抖动-debounce\"><a href=\"#防抖动-debounce\" class=\"headerlink\" title=\"防抖动(debounce)\"></a>防抖动(debounce)</h2><blockquote>\n<p>原理</p>\n</blockquote>\n<p>在调用事件之前,设置一个计时器,在规定时间之后才会去调用。<br>而在规定时间内再次执行这个调用事件的动作的话,就会把原来的定时器clear掉,再重新设置一个定时器。<br>与函数节流不同,防抖动只有最后一次操作能被触发</p>\n<blockquote>\n<p>具体代码实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将会包装事件的 debounce 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 维护一个 timer</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 ‘this’ 和 ‘arguments’ 获取函数的作用域和变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(context, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当用户滚动时被调用的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'You are scrolling!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 debounce 中包装我们的函数，过 2 秒触发一次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>);</span><br><span class=\"line\">elem.addEventListener(<span class=\"string\">'scroll'</span>, debounce(foo, <span class=\"number\">2000</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数节流-throttle\"><a href=\"#函数节流-throttle\" class=\"headerlink\" title=\"函数节流(throttle)\"></a>函数节流(throttle)</h2><p>节流是另一种处理类似问题的解决方法。<br><code>节流函数允许一个函数在规定的时间内只执行一次。</code></p>\n<p>它和防抖动最大的区别就是，<code>节流函数不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。(每隔一段时间执行一次)</code></p>\n<p>比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流阀技术来实现。</p>\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行；直到delay秒后，定时器执行函数，清空定时器，这样就可以设置下个定时器。</p>\n<blockquote>\n<p>具体代码实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = fucntion(func,delay)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> funtion()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        func.apply(context,args);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;,delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言由于自己在之前的个人项目中涉及到JS防抖动的问题,所以我上网查询了相关资料,顺便谈谈自己对防抖动与节流的总结吧应用场景window的resize，scroll事件拖拽过程中的 mousemove事件文字输入过程中的keyup连续快速点击等事件这些事件会在短时间内多次触发,十分","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}]}]}