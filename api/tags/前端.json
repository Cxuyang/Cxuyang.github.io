{"name":"前端","slug":"前端","count":2,"postlist":[{"title":"Fetch随记","slug":"fetch","date":"2018-03-05T01:01:30.000Z","updated":"2018-04-25T03:02:27.728Z","comments":true,"path":"api/articles/fetch.json","excerpt":"","keywords":null,"cover":"/img/fetch-noheader.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Fetch随记</p>\n</blockquote>\n<p>最近公司着手vue来开启新项目，前后端数据交互采用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"noopener\">Fetch</a>。<br>虽然自己在个人的React项目中用过<code>fetch</code>框架,但当时后台数据api是支持<code>cors</code>的,当时也没想那么多。到后面实际运用配置跨域时,发现问题还是很多的。<br>在网上看到了很多很好的答案，自己总结一下。</p>\n<h2 id=\"服务器支持-CORS\"><a href=\"#服务器支持-CORS\" class=\"headerlink\" title=\"服务器支持 CORS\"></a>服务器支持 CORS</h2><p>服务器支持 CORS的情况下，可以使用Fetch Api。 </p>\n<h3 id=\"配置header\"><a href=\"#配置header\" class=\"headerlink\" title=\"配置header\"></a>配置header</h3><p>在客户端设置相应的  <code>Access-Control-Allow-Origin</code>  即可得到数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myHeaders = <span class=\"keyword\">new</span> Headers(&#123;</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fetch(url, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    headers: myHeaders,</span><br><span class=\"line\">    mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">&#125;) .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">作者：Seven</span><br><span class=\"line\">链接：https:<span class=\"comment\">//www.zhihu.com/question/47029864/answer/150069385</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"不配置header\"><a href=\"#不配置header\" class=\"headerlink\" title=\"不配置header\"></a>不配置header</h3><p>不配置header的话有可能返回的是一个response对象,<br><img src=\"/img/fetch-noheader.jpg\" alt=\"fetch-noheader\"><br>这时可将<code>.(response=&gt;response.json())</code>改为<code>.(response=&gt;response.text())</code>;</p>\n<h2 id=\"服务器不支持-CORS\"><a href=\"#服务器不支持-CORS\" class=\"headerlink\" title=\"服务器不支持 CORS\"></a>服务器不支持 CORS</h2><h3 id=\"联系后端人员修改\"><a href=\"#联系后端人员修改\" class=\"headerlink\" title=\"联系后端人员修改\"></a>联系后端人员修改</h3><h3 id=\"采用JSONP方式\"><a href=\"#采用JSONP方式\" class=\"headerlink\" title=\"采用JSONP方式\"></a>采用JSONP方式</h3><p>我看到知乎上有一篇介绍JSONP很好的文章，我就不展开说了<br><a href=\"https://zhuanlan.zhihu.com/p/22338759\" target=\"_blank\" rel=\"noopener\">JSONP</a></p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2>","text":"前言Fetch随记最近公司着手vue来开启新项目，前后端数据交互采用Fetch。<br>虽然自己在个人的React项目中用过fetch框架,但当时后台数据api是支持cors的,当时也没想那么多。到后面实际运用配置跨域时,发现问题还是很多的。<br>在网上看到了很多很好的答案，自","link":"","raw":null,"photos":[],"categories":[{"name":"ES6","slug":"ES6","count":2,"path":"api/categories/ES6.json"}],"tags":[{"name":"fetch","slug":"fetch","count":2,"path":"api/tags/fetch.json"},{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}]},{"title":"文件上传随记","slug":"file_upload","date":"2018-04-02T02:01:30.000Z","updated":"2018-04-25T03:14:42.179Z","comments":true,"path":"api/articles/file_upload.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>多文件上传</p>\n</blockquote>\n<p>项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。</p>\n<h2 id=\"Fetch-FormData\"><a href=\"#Fetch-FormData\" class=\"headerlink\" title=\"Fetch FormData\"></a>Fetch FormData</h2><p>首先获取文件对象的数组(多文件的情况下，单文件就不需要遍历添加了),<br>随后实例FormData对象，将文件对象数组添加到FormData对象中，<br>再以fetch body属性上传就行了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">filesArray.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    fileData.append(<span class=\"string\">'file'</span>,item.raw)</span><br><span class=\"line\">&#125;)        </span><br><span class=\"line\"><span class=\"keyword\">let</span> fetchOptionsForFile=&#123;</span><br><span class=\"line\">    method:<span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    body:fileData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">`<span class=\"subst\">$&#123;ipConfig&#125;</span>/api/Function/MFileImport`</span>,fetchOptionsForFile).then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>response.json()).then(<span class=\"function\"><span class=\"params\">json</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(json);&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件列表上传\"><a href=\"#文件列表上传\" class=\"headerlink\" title=\"文件列表上传\"></a>文件列表上传</h2><p>通过选择文件夹，取得文件夹内的文件列表然后以POST FormData的方式进行上传。</p>\n<p>上传配置只需在<code>input type=file</code>加上<code>webkitdirectory</code>属性即可。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileList\"</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">webkitdirectory</span> <span class=\"attr\">v-on:change</span> =<span class=\"string\">\"uploadFileList\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>注:webkitdirectory属性目前仅支持webkit内核的浏览器。</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileList = <span class=\"keyword\">this</span>.$refs.fileList.files</span><br></pre></td></tr></table></figure>\n<p>取得文件列表<code>fileList</code>后循环添加到<code>fileData</code>对象就行了。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>后面再补充吧。</p>\n","text":"前言多文件上传项目之前采用的是element-ui官方的文件上传组件，但在实际开发的过程中，发现该组件虽然能够选择多个文件进行上传，但是却不能同时上传(文件只能发送一次http请求，上传一次)。<br>最后采用 POST FormData的方式进行上传。Fetch FormDat","link":"","raw":null,"photos":[],"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"fetch","slug":"fetch","count":2,"path":"api/tags/fetch.json"},{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}]}]}